generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                   String              @unique @db.VarChar(50)
  email                      String              @unique @db.VarChar(255)
  avatar                     String?             @default("default.png") @db.VarChar(255)
  role                       user_role           @default(ADMIN)
  mmr                        Int?                @default(1000)
  total_score_multi          Int?                @default(0)
  primary_color_preference   String?             @default("192 82% 61%") @db.VarChar(20)
  secondary_color_preference String?             @default("0 74% 65%") @db.VarChar(20)
  created_at                 DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?           @default(now()) @updatedAt @db.Timestamptz(6)
  authentications            Authentication[]
  games_created              Game[]              @relation("GameCreator")
  playerGameSessions         PlayerGameSession[]
}

model Authentication {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?   @db.Uuid
  type          auth_type
  identifier    String    @db.VarChar(255)
  password_hash String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  user          User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([type, identifier])
}

model Word {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  word_text  String    @unique @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  games      Game[]
  guesses    Guess[]
}

model Game {
  id                 String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creator_id         String?             @db.Uuid
  mode               game_mode
  word_id            String?             @db.Uuid
  status             game_status         @default(waiting)
  max_players        Int?                @default(2)
  player_in_game     Int?                @default(0)
  started_at         DateTime?           @db.Timestamptz(6)
  ended_at           DateTime?           @db.Timestamptz(6)
  created_at         DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?           @default(now()) @updatedAt @db.Timestamptz(6)
  creator            User?               @relation("GameCreator", fields: [creator_id], references: [id], onUpdate: NoAction)
  word               Word?               @relation(fields: [word_id], references: [id], onUpdate: NoAction)
  playerGameSessions PlayerGameSession[]
}

model PlayerGameSession {
  id               String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  game_id          String?      @db.Uuid
  user_id          String?      @db.Uuid
  score_by_time    Int?         @default(0)
  score_by_guesses Int?         @default(0)
  score_bonus      Int?         @default(0)
  succeeded        game_result? @default(in_progress)
  mmr_change       Int?         @default(0)
  joined_at        DateTime?    @default(now()) @db.Timestamptz(6)
  guesses_count    Int?         @default(0)
  status           String?      @default("actif") @db.VarChar(20)
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  guesses          Guess[]
  game             Game?        @relation(fields: [game_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             User?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Guess {
  id              String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  game_session_id String?            @db.Uuid
  word_id         String?            @db.Uuid
  attempt_number  Int
  result          Json?
  created_at      DateTime?          @default(now()) @db.Timestamptz(6)
  game_session    PlayerGameSession? @relation(fields: [game_session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  word            Word?              @relation(fields: [word_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum game_status {
  waiting
  in_progress
  completed
  cancelled
}

enum game_mode {
  solo
  duel
}

enum game_result {
  in_progress
  won
  lost
  draw
}

enum auth_type {
  email
  google
  facebook
}

enum user_role {
  USER
  ADMIN
}
